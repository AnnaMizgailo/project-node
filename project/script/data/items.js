const path = require("path");
const fs = require("fs");
let dataFromItems = fs.readFileSync(path.join(__dirname, "./items.json"),{encoding: "utf-8"});
//–ø–∞—Ä—Å–∏–º –∏–Ω—Ñ—É –∏–∑ json –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —é–∑–µ—Ä–æ–≤
let items = {
    ...JSON.parse(dataFromItems)
};

function restoreJson(){ //–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–µ—Å—Å–∏–∏
    fs.writeFileSync(path.join(__dirname, "./items.json"), JSON.stringify(items), {encoding: "utf-8"});
}

function returnListOfItems(){//–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏
    const keys = Object.keys(items);
    let id = 0;
    listOfItems = [];
    for(const key of keys){
        const itemObj = {
            id: id++,
            itemName: key,
            itemImg: items[key].image,
            price: +items[key].price,
            retailer: items[key].retailer, 
            rating: +items[key].rating,
            sales: +items[key].sales,
            category: items[key].category,
            reviews: items[key].reviews,
            numOfReviews: items[key].reviews.length
        };
        listOfItems.push(itemObj);
    }
    return listOfItems;
}
function ifItemExists(name){//–∞ —Ç—ã –≤–æ–æ–±—â–µ –µ—Å—Ç—å?
    const keys = Object.keys(items);
    for (const key of keys){
        if(key == name){
            return true;
        }
    }
    return false;
}
function ifItemInArray(array, name){//–∞ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –µ—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ?
    for(let i = 0; i < array.length; i++){
        if(array[i] == name){
            return true;
        }
    }
    return false;
}

function returnListOfPurchases(array){//–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
    let list = [];
    for(let i = 0; i < array.length; i++){
        let obj = items[array[i].name];
        obj.id = +i;
        obj.isReviewed = array[i].isReviewed;
        obj.isRated = array[i].isRated;
        obj.isComplained = array[i].isComplained;
        list.push(obj);
    }
    return list;
}
function returnListOfFilteredItems(category){//–≤–µ—Ä–Ω—É—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    let array = returnListOfItems();
    if(category==""){
        return array;
    }
    for(let i = 0; i < array.length; i++){
        if(array[i].category !== category){
            array.splice(i, 1);
            i--;
        }
    }
    return array;
}
function getListOfItemsBySubname(subname){//–¥–ª—è searchBar –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—É–±—Å—Ç—Ä–æ–∫–µ
    let array = returnListOfItems();
    let listOfItems = [];
    for(let i = 0; i < array.length; i++){
        if(array[i].itemName.toLowerCase().includes(subname.toLowerCase())){
            listOfItems.push(array[i]);
        }
    }
    return listOfItems;
}
function addRating(name){//–æ—Ç–º–µ—Ç–æ—á–∫–∞ "–ù—Ä–∞–≤–∏—Ç—Å—è"
    items[name].rating += 1;
    restoreJson();
}
function deleteRating(name){//–æ—Ç–º–µ—Ç–æ—á–∫–∞ "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"
    items[name].rating -= 1;
    restoreJson();
}
function returnReviews(name){//–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä
    let string = "";
    if(items[name].reviews.length < 1){
        return "–ü–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ—Ç";
    }
    for(let i = 0; i<items[name].reviews.length; i++){
        string += items[name].reviews[i].user + "üìù:" + items[name].reviews[i].review + `\n`;
    }
    return string;
}
function changeItem(name, newPrice){//–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä
    if(items[name].price == newPrice){
        return "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!";
    }
    items[name].price = newPrice;
    restoreJson();
    return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –∏–∑–º–µ–Ω–µ–Ω–∞!";
}
function addReview(name, review, login){//–æ—Ç–∑—ã–≤—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã!
    if(review == ""){
        return false;
    }
    let obj = {
        user: login,
        review: review
    }
    items[name].reviews.push(obj);
    restoreJson();
    return true;
}
module.exports = {ifItemExists, returnListOfItems, items, ifItemInArray,  returnListOfPurchases, addReview, changeItem, returnReviews, deleteRating, addRating, getListOfItemsBySubname, returnListOfFilteredItems};